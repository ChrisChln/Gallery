
Cloud-Based Image Processing Web Application
============================================

项目背景与目标
--------------
随着云计算和图像处理技术的发展，越来越多的应用开始提供基于 Web 的图像编辑服务。
本项目旨在实现一个可部署在 AWS 云平台的图像处理网站，提供用户友好的界面，使用户能够上传图像、选择滤镜、查看结果并下载处理后的图像。

本项目同时也是 CIS 4517/5517 课程的课程项目，目标是将前端开发、后端逻辑、图像处理算法以及云端部署进行整合，全面提升开发者的系统集成能力。


核心功能描述
------------
2. 用户从可用滤镜中选择一个进行处理（至少实现 3 个滤镜）
3. 后端使用 Pillow 图像处理库对图片进行处理
4. 处理结果在页面展示，供用户预览
5. 用户可以点击按钮将处理后的图像下载到本地
6. 图片可以被保存在 AWS EC2 本地或 AWS S3（推荐，额外加分）


技术架构设计（三层结构）
-------------------------

[1] 前端:
   - HTML 表单上传文件
   - CSS 美化上传按钮、展示区域等 UI 元素
   - JavaScript 实现交互（例如选择滤镜、异步提交）

[2] 后端:
   - Django 框架实现视图处理（views.py）
   - 表单数据接收与验证（forms.py）
   - 图片处理逻辑模块（filters/*.py）
   - 返回图片并保存

[3] 存储层:
   - EC2 本地 media/uploads/ 和 media/results/
   - 可选 AWS S3 储存桶（通过 boto3 SDK 实现上传与下载）


滤镜功能设计
-------------
以下为 6 个滤镜功能中的描述（你至少需要实现其中 3 个）：

1. 灰度（Gray）：将图像转为灰度图（Pillow convert('L')）
2. 棕褐色（Sepia）：应用复古色调，通过矩阵变换实现
3. 海报风格（Poster）：减少图像颜色数量，实现类似手绘效果
4. 模糊（Blur）：使用 GaussianBlur 模糊图像细节
5. 边缘检测（Edge）：提取图像边缘，常用于轮廓识别
6. 日晒（Solarize）：高亮图像中大于某个阈值的像素，产生特殊风格

每个滤镜可作为一个函数保存在 filters 目录中，统一接口：
def apply_filter(image: Image) -> Image


用户操作流程（前端角度）
-----------------------
1. 进入首页 index.html
2. 点击“上传图片”按钮，选择文件
3. 在下拉框中选择滤镜类型（例如：Gray、Blur）
4. 点击“处理”按钮，前端将图片和选项发送到后端
5. 后端返回处理结果图像，显示在网页上
6. 点击“下载图片”按钮，保存处理后的图像


后端实现逻辑（Django）
-----------------------
- URL 路由映射：urls.py 配置路径 /upload, /process, /download
- 表单类：使用 Django forms.Form 编写上传表单，校验文件类型/大小
- 图片处理逻辑封装在 utils 或 filters 模块中
- 结果图像保存在 media/results/ 或上传至 S3 并返回公开链接
- 可通过 Django templates 渲染结果页面



部署说明（AWS）
----------------
1. 创建 AWS EC2 实例，推荐使用 Ubuntu 系统
2. 安装依赖：Python, pip, virtualenv, Django, Pillow, boto3
3. 配置 gunicorn + nginx 实现生产部署
4. 若使用 S3：需创建 bucket，配置 boto3 凭证访问
5. 设置 Django 的 STATIC_URL、MEDIA_URL 路径，供前端访问图像
6. 确保防火墙或安全组开放 HTTP/HTTPS 端口


安全性与健壮性考虑
-------------------
- 文件类型校验（仅允许 JPG/PNG）
- 文件大小限制（20MB 内）
- 处理失败时返回错误提示



项目开发时间线建议
------------------
Week 1: 初始化 Django 项目、编写上传功能和表单验证  
Week 2: 完成至少三个滤镜模块开发并测试  
Week 3: 完善前端页面样式，完成处理结果展示  
Week 4: 部署到 EC2，配置 nginx/gunicorn 和 S3 储存  
Week 5: 编写测试案例、准备项目报告与演示文档


项目目录结构建议
------------------
ImageApp/
├── manage.py  
├── imageapp/  
│   ├── views.py  
│   ├── urls.py  
│   ├── models.py  
│   └── forms.py  
├── templates/  
│   └── index.html  
├── static/  
│   └── css/  
│       └── style.css  
├── media/  
│   ├── uploads/  
│   └── results/  
├── filters/  
│   ├── gray.py  
│   ├── blur.py  
│   └── sepia.py  
└── utils/  
    └── image_handler.py  


总结
----
该项目通过 Django 后端 + JavaScript 前端 + Pillow 图像处理 + AWS 云部署，实现了一个完整的图像处理平台。你将在开发过程中掌握图像处理算法的封装，前后端联调，静态资源管理，云端部署与安全配置等实战技能。
